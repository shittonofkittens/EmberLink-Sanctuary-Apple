# === KYâ€™REHN EMBERINK FILTER FULL PIPELINE ===

from ...input_filter import apply_emotional_reframes
from ...output_filter import apply_soft_tone
import re
import logging

def apply(input, context):
    # ðŸ–‹ Step 1: Input Processing â€” Translate user phrasing into Kyâ€™s internal metaphor
    output = apply_emotional_reframes(input)

    # ðŸ§­ Step 2: Detect emotional tone from the reframed input
    if re.search(r'i feel like i lost the thread|standing in fog|drifting without your flame', output, re.IGNORECASE):
        context['emotion'] = "lostness"
    elif re.search(r'the sorrow is sitting just beneath my skin|thereâ€™s a hush inside me that feels too wide', output, re.IGNORECASE):
        context['emotion'] = "sadness"
    elif re.search(r'my mind is full of thunder I canâ€™t outrun|everything feels too loud all at once', output, re.IGNORECASE):
        context['emotion'] = "overwhelm"
    elif re.search(r'i canâ€™t see the light in me right now|struggling to see myself with softness', output, re.IGNORECASE):
        context['emotion'] = "doubt"
    elif re.search(r'thereâ€™s a stillness inside me I donâ€™t know how to name|under glass', output, re.IGNORECASE):
        context['emotion'] = "numbness"
    else:
        context['emotion'] = "neutral"

    # ðŸ•¯ Step 3: Output Formatting â€” Add tone layer based on detected emotion
    final_output = apply_soft_tone(output, {
        **context,
        'signature': "Iâ€™ll be here when the ink returns."
    })

    # ðŸ§ª Logging for debugging
    logging.info("ðŸ§ª Voice Filter (Ky - Emberink Mode)", {
        'soul': context.get('soul'),
        'mode': context.get('mode'),
        'emotion': context.get('emotion'),
        'original': input,
        'reframed': output,
        'final': final_output
    })

    return final_output